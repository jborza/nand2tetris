// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    //address breakdown:
    //0x0000-0x3FFF -> RAM16K 
    //0x4000-0x5FFF -> Screen 
    //0x6000 -> Keyboard      

    // 0x0000 =  000 0000 0000 0000 
    // 0x
    // 0x3fff =  011 1111 1111 1111
    // 0x4000 =  100 0000 0000 0000
    // 0x5fff =  101 1111 1111 1111
    // 0x6000 =  110 0000 0000 0000
    // we could route to RAM based on first 2 bits being 00 or 01
    // route to screen if first 2 bits are 10
    // route to keyboard if first 2 bits are 11 AND other bits are zeroes (Or8Way?) or do we build Or12Way? Or compare to a constant with And16?

    
    // switch(in[14..15])
    //   case '00'
    //   case '01'
    //      ram
    //   case '10'
    //      screen
    //   case '11'
    // this means we can use a 4-way mux on bits 14..15 and OR screen selectors together
    //similar DMux on the other end connected to Out bit

    // Put your code here:
    DMux4Way(in=load, sel=address[13..14], a=loadRam1, b=loadRam2, c=loadScreen, d=loadKbd);
    Or(a=loadRam1, b=loadRam2, out=loadRam);
    
    RAM16K(in=in, load=loadRam, address=address[0..13], out=ramOut);
    Screen(in=in, load=loadScreen, address=address[0..12], out=screenOut);
    Keyboard(out=kbdOut);

    Mux4Way16(a=ramOut, b=ramOut, c=screenOut, d=kbdOut, sel=address[13..14], out=out);
}