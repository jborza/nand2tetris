// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // decode the instruction into: 
    // first bit is A or C instruction
    // A instruction sets the A register to a 15-bit immediate value
    // further decode C instruction into JMP, DST and ALU bits
    // ixxaccccccdddjjj
    // i=opcode [0]
    //    a=function (toggles between A if a=0 and M if a=1) [12]
    //     cccccc = ALU bits (zx nx zy ny f no) [11 10 9 8 7 6]
    //           ddd=AMD destinations respectively [a=5,m=4,d=3]
    //              jjj=jumps [2,1,0]
    // jump table:
    // j1 j2 j3  mnemonic
    // <0 =0 >=
    // ------------------
    //  0  0  0  null
    //  0  0  1  JGT
    //  0  1  0  JEQ
    //  0  1  1  JGE
    //  1  0  0  JLT
    //  1  0  1  JNE
    //  1  1  0  JLE
    //  1  1  1  JMP (unconditional)

   
    //prepare C instruction stuff
    Not(in=instruction[15], out=aInstruction);
    And(a=instruction[15], b=instruction[5], out=writeA);
    And(a=instruction[15], b=instruction[4], out=writeM);
    And(a=instruction[15], b=instruction[3], out=writeD);
    //this "A mux" feeds A register with alu output (if target A bit is set)
    Mux16(a=instruction, b=aluOut, sel=writeA, out=outAMux);

    //A register fed by ALU output or address bits
    Register(in=outAMux, load=writeA, out=outAReg);
    //D register
    Register(in=aluOut, load=writeD, out=outDReg);

    //this mux is driven by the a bit
    Mux16(a=outAReg, b=inM, sel=instruction[12], out=aOrM);
    ALU(x=outDReg, y=aOrM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOut, zr=aluZ, ng=aluN);

    // jump combination from ALU output
    // aluP = aluPositive = Nor(aluZ, aluN);
    Nor(a=aluZ, b=aluN, out=aluP);
    //we can toggle jump in 3 stages - equal:
    And(a=instruction[1], b=aluZ, out=doEq);
    And(a=instruction[2], b=aluN, out=doNeg);
    And(a=instruction[0], b=aluP, out=doPos);
    Or(a=doEq, b=doNeg, out=doEqOrNeg);
    Or(a=doEqOrNeg, b=doPos, out=doJmp);
    Not(in=doJmp, out=pcInc);

    // PC is fed from A register, should increment unless jump is successful
    PC(in=outAReg, load=doJmp, inc=pcInc, reset=reset, out[0..14]=pc);
    //M is written (writeM) only for M=??? (target bit)
    Mux16(a=aluOut, b=false, sel=false, out=outM);
    Mux16(a=outAReg, b=false, sel=false, out[0..14]=addressM);
}